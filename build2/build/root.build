# file      : build/root.build
# license   : MIT; see accompanying LICENSE file

using in

cxx.std = latest

using cxx

hxx{*}: extension = hxx
ixx{*}: extension = ixx
txx{*}: extension = txx
cxx{*}: extension = cxx

# Note that we bundle some C headers (see the LICENSE file for details).
#
h{*}: extension = h

if ($cxx.target.system == 'win32-msvc')
  cxx.poptions += -D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS

if ($cxx.class == 'msvc')
  cxx.coptions += /wd4251 /wd4275 /wd4800

cxx.poptions =+ "-I$out_root" "-I$src_root"

# While we don't have any C sources to compile, we need to get the C compiler
# path to use as native/default.
#
using c.config

# Imports for build2/ (or any subdirectory other than libbuild2/) should be
# done here in order to get stable order in the host build configuration that
# we embed into libbuild2.
#
import libbutl = libbutl%lib{butl}

# Load the cli module but only if it's available. This way a distribution
# that includes pre-generated files can be built without installing cli.
# This is also the reason why we need to explicitly spell out individual
# source file prerequisites instead of using the cli.cxx{} group (it won't
# be there unless the module is configured).
#
using? cli

# Specify the test target for cross-testing.
#
test.target = $cxx.target
