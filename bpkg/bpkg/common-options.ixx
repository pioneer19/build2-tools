// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

// Begin prologue.
//
//
// End prologue.

#include <cassert>

namespace bpkg
{
  namespace cli
  {
    // usage_para
    //
    inline usage_para::
    usage_para (value v)
    : v_ (v)
    {
    }

    // unknown_mode
    //
    inline unknown_mode::
    unknown_mode (value v)
    : v_ (v)
    {
    }

    // exception
    //
    inline ::std::ostream&
    operator<< (::std::ostream& os, const exception& e)
    {
      e.print (os);
      return os;
    }

    // unknown_option
    //
    inline unknown_option::
    unknown_option (const std::string& option)
    : option_ (option)
    {
    }

    inline const std::string& unknown_option::
    option () const
    {
      return option_;
    }

    // unknown_argument
    //
    inline unknown_argument::
    unknown_argument (const std::string& argument)
    : argument_ (argument)
    {
    }

    inline const std::string& unknown_argument::
    argument () const
    {
      return argument_;
    }

    // missing_value
    //
    inline missing_value::
    missing_value (const std::string& option)
    : option_ (option)
    {
    }

    inline const std::string& missing_value::
    option () const
    {
      return option_;
    }

    // invalid_value
    //
    inline invalid_value::
    invalid_value (const std::string& option,
                   const std::string& value,
                   const std::string& message)
    : option_ (option),
      value_ (value),
      message_ (message)
    {
    }

    inline const std::string& invalid_value::
    option () const
    {
      return option_;
    }

    inline const std::string& invalid_value::
    value () const
    {
      return value_;
    }

    inline const std::string& invalid_value::
    message () const
    {
      return message_;
    }

    // file_io_failure
    //
    inline file_io_failure::
    file_io_failure (const std::string& file)
    : file_ (file)
    {
    }

    inline const std::string& file_io_failure::
    file () const
    {
      return file_;
    }

    // unmatched_quote
    //
    inline unmatched_quote::
    unmatched_quote (const std::string& argument)
    : argument_ (argument)
    {
    }

    inline const std::string& unmatched_quote::
    argument () const
    {
      return argument_;
    }

    // unexpected_group
    //
    inline unexpected_group::
    unexpected_group (const std::string& argument,
                      const std::string& group)
    : argument_ (argument), group_ (group)
    {
    }

    inline const std::string& unexpected_group::
    argument () const
    {
      return argument_;
    }

    inline const std::string& unexpected_group::
    group () const
    {
      return group_;
    }

    // group_separator
    //
    inline group_separator::
    group_separator (const std::string& encountered,
                     const std::string& expected)
    : encountered_ (encountered), expected_ (expected)
    {
    }

    inline const std::string& group_separator::
    encountered () const
    {
      return encountered_;
    }

    inline const std::string& group_separator::
    expected () const
    {
      return expected_;
    }

    // argv_scanner
    //
    inline argv_scanner::
    argv_scanner (int& argc, char** argv, bool erase)
    : i_ (1), argc_ (argc), argv_ (argv), erase_ (erase)
    {
    }

    inline argv_scanner::
    argv_scanner (int start, int& argc, char** argv, bool erase)
    : i_ (start), argc_ (argc), argv_ (argv), erase_ (erase)
    {
    }

    inline int argv_scanner::
    end () const
    {
      return i_;
    }

    // vector_scanner
    //
    inline vector_scanner::
    vector_scanner (const std::vector<std::string>& v, std::size_t i)
    : v_ (v), i_ (i)
    {
    }

    inline std::size_t vector_scanner::
    end () const
    {
      return i_;
    }

    inline void vector_scanner::
    reset (std::size_t i)
    {
      i_ = i;
    }

    // argv_file_scanner
    //
    inline argv_file_scanner::
    argv_file_scanner (int& argc,
                       char** argv,
                       const std::string& option,
                       bool erase)
    : argv_scanner (argc, argv, erase),
      option_ (option),
      options_ (&option_info_),
      options_count_ (1),
      i_ (1),
      skip_ (false)
    {
      option_info_.option = option_.c_str ();
      option_info_.search_func = 0;
    }

    inline argv_file_scanner::
    argv_file_scanner (int start,
                       int& argc,
                       char** argv,
                       const std::string& option,
                       bool erase)
    : argv_scanner (start, argc, argv, erase),
      option_ (option),
      options_ (&option_info_),
      options_count_ (1),
      i_ (1),
      skip_ (false)
    {
      option_info_.option = option_.c_str ();
      option_info_.search_func = 0;
    }

    inline argv_file_scanner::
    argv_file_scanner (const std::string& file,
                       const std::string& option)
    : argv_scanner (0, zero_argc_, 0),
      option_ (option),
      options_ (&option_info_),
      options_count_ (1),
      i_ (1),
      skip_ (false)
    {
      option_info_.option = option_.c_str ();
      option_info_.search_func = 0;

      load (file);
    }

    inline argv_file_scanner::
    argv_file_scanner (int& argc,
                       char** argv,
                       const option_info* options,
                       std::size_t options_count,
                       bool erase)
    : argv_scanner (argc, argv, erase),
      options_ (options),
      options_count_ (options_count),
      i_ (1),
      skip_ (false)
    {
    }

    inline argv_file_scanner::
    argv_file_scanner (int start,
                       int& argc,
                       char** argv,
                       const option_info* options,
                       std::size_t options_count,
                       bool erase)
    : argv_scanner (start, argc, argv, erase),
      options_ (options),
      options_count_ (options_count),
      i_ (1),
      skip_ (false)
    {
    }

    inline argv_file_scanner::
    argv_file_scanner (const std::string& file,
                       const option_info* options,
                       std::size_t options_count)
    : argv_scanner (0, zero_argc_, 0),
      options_ (options),
      options_count_ (options_count),
      i_ (1),
      skip_ (false)
    {
      load (file);
    }

    // group_scanner
    //
    inline group_scanner::
    group_scanner (scanner& s)
    : scan_ (s), state_ (skipped), i_ (1), group_scan_ (group_)
    {
    }

    inline scanner& group_scanner::
    group ()
    {
      assert (state_ == scanned || state_ == skipped);
      return group_scan_;
    }

    inline const char* group_scanner::
    escape (const char* a)
    {
      switch (sense (a))
      {
        case separator::none:       break;
        case separator::open:       return "\\{";
        case separator::close:      return "\\}";
        case separator::open_plus:  return "\\+{";
        case separator::close_plus: return "\\}+";
      }

      return a;
    }

    inline group_scanner::separator group_scanner::
    sense (const char* s)
    {
      switch (s[0])
      {
        case '{': return s[1] == '\0' ? open  : none;
        case '}':
        {
          switch (s[1])
          {
            case '+': return s[2] == '\0' ? close_plus  : none;
            default:  return s[1] == '\0' ? close       : none;
          }
        }
        case '+':
        {
          switch (s[1])
          {
            case '{': return s[2] == '\0' ? open_plus  : none;
            default:  return                             none;
          }
        }
      }

      return none;
    }
  }
}

namespace bpkg
{
  // common_options
  //

  inline const bool& common_options::
  v () const
  {
    return this->v_;
  }

  inline const bool& common_options::
  V () const
  {
    return this->V_;
  }

  inline const bool& common_options::
  quiet () const
  {
    return this->quiet_;
  }

  inline const uint16_t& common_options::
  verbose () const
  {
    return this->verbose_;
  }

  inline bool common_options::
  verbose_specified () const
  {
    return this->verbose_specified_;
  }

  inline const size_t& common_options::
  jobs () const
  {
    return this->jobs_;
  }

  inline bool common_options::
  jobs_specified () const
  {
    return this->jobs_specified_;
  }

  inline const bool& common_options::
  no_result () const
  {
    return this->no_result_;
  }

  inline const bool& common_options::
  no_progress () const
  {
    return this->no_progress_;
  }

  inline const path& common_options::
  build () const
  {
    return this->build_;
  }

  inline bool common_options::
  build_specified () const
  {
    return this->build_specified_;
  }

  inline const strings& common_options::
  build_option () const
  {
    return this->build_option_;
  }

  inline bool common_options::
  build_option_specified () const
  {
    return this->build_option_specified_;
  }

  inline const path& common_options::
  fetch () const
  {
    return this->fetch_;
  }

  inline bool common_options::
  fetch_specified () const
  {
    return this->fetch_specified_;
  }

  inline const strings& common_options::
  fetch_option () const
  {
    return this->fetch_option_;
  }

  inline bool common_options::
  fetch_option_specified () const
  {
    return this->fetch_option_specified_;
  }

  inline const size_t& common_options::
  fetch_timeout () const
  {
    return this->fetch_timeout_;
  }

  inline bool common_options::
  fetch_timeout_specified () const
  {
    return this->fetch_timeout_specified_;
  }

  inline const butl::url& common_options::
  pkg_proxy () const
  {
    return this->pkg_proxy_;
  }

  inline bool common_options::
  pkg_proxy_specified () const
  {
    return this->pkg_proxy_specified_;
  }

  inline const path& common_options::
  git () const
  {
    return this->git_;
  }

  inline bool common_options::
  git_specified () const
  {
    return this->git_specified_;
  }

  inline const strings& common_options::
  git_option () const
  {
    return this->git_option_;
  }

  inline bool common_options::
  git_option_specified () const
  {
    return this->git_option_specified_;
  }

  inline const path& common_options::
  sha256 () const
  {
    return this->sha256_;
  }

  inline bool common_options::
  sha256_specified () const
  {
    return this->sha256_specified_;
  }

  inline const strings& common_options::
  sha256_option () const
  {
    return this->sha256_option_;
  }

  inline bool common_options::
  sha256_option_specified () const
  {
    return this->sha256_option_specified_;
  }

  inline const path& common_options::
  tar () const
  {
    return this->tar_;
  }

  inline bool common_options::
  tar_specified () const
  {
    return this->tar_specified_;
  }

  inline const strings& common_options::
  tar_option () const
  {
    return this->tar_option_;
  }

  inline bool common_options::
  tar_option_specified () const
  {
    return this->tar_option_specified_;
  }

  inline const qualified_option<openssl_commands, path>& common_options::
  openssl () const
  {
    return this->openssl_;
  }

  inline bool common_options::
  openssl_specified () const
  {
    return this->openssl_specified_;
  }

  inline const qualified_option<openssl_commands, strings>& common_options::
  openssl_option () const
  {
    return this->openssl_option_;
  }

  inline bool common_options::
  openssl_option_specified () const
  {
    return this->openssl_option_specified_;
  }

  inline const bpkg::auth& common_options::
  auth () const
  {
    return this->auth_;
  }

  inline bool common_options::
  auth_specified () const
  {
    return this->auth_specified_;
  }

  inline const std::set<string>& common_options::
  trust () const
  {
    return this->trust_;
  }

  inline bool common_options::
  trust_specified () const
  {
    return this->trust_specified_;
  }

  inline const bool& common_options::
  trust_yes () const
  {
    return this->trust_yes_;
  }

  inline const bool& common_options::
  trust_no () const
  {
    return this->trust_no_;
  }

  inline const string& common_options::
  pager () const
  {
    return this->pager_;
  }

  inline bool common_options::
  pager_specified () const
  {
    return this->pager_specified_;
  }

  inline const strings& common_options::
  pager_option () const
  {
    return this->pager_option_;
  }

  inline bool common_options::
  pager_option_specified () const
  {
    return this->pager_option_specified_;
  }

  inline const string& common_options::
  options_file () const
  {
    return this->options_file_;
  }

  inline bool common_options::
  options_file_specified () const
  {
    return this->options_file_specified_;
  }

  inline const dir_path& common_options::
  default_options () const
  {
    return this->default_options_;
  }

  inline bool common_options::
  default_options_specified () const
  {
    return this->default_options_specified_;
  }

  inline const bool& common_options::
  no_default_options () const
  {
    return this->no_default_options_;
  }
}

// Begin epilogue.
//
//
// End epilogue.
