// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

#ifndef BDEP_INIT_OPTIONS_HXX
#define BDEP_INIT_OPTIONS_HXX

// Begin prologue.
//
//
// End prologue.

#include <bdep/project-options.hxx>

namespace bdep
{
  class cmd_init_options: public ::bdep::configuration_add_options,
    public ::bdep::project_options
  {
    public:
    cmd_init_options ();

    // Return true if anything has been parsed.
    //
    bool
    parse (int& argc,
           char** argv,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (int start,
           int& argc,
           char** argv,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (int& argc,
           char** argv,
           int& end,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (int start,
           int& argc,
           char** argv,
           int& end,
           bool erase = false,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    bool
    parse (::bdep::cli::scanner&,
           ::bdep::cli::unknown_mode option = ::bdep::cli::unknown_mode::fail,
           ::bdep::cli::unknown_mode argument = ::bdep::cli::unknown_mode::stop);

    // Merge options from the specified instance appending/overriding
    // them as if they appeared after options in this instance.
    //
    void
    merge (const cmd_init_options&);

    // Option accessors and modifiers.
    //
    const bool&
    empty () const;

    bool&
    empty ();

    void
    empty (const bool&);

    const dir_path&
    config_add () const;

    dir_path&
    config_add ();

    void
    config_add (const dir_path&);

    bool
    config_add_specified () const;

    void
    config_add_specified (bool);

    const dir_path&
    config_create () const;

    dir_path&
    config_create ();

    void
    config_create (const dir_path&);

    bool
    config_create_specified () const;

    void
    config_create_specified (bool);

    const bool&
    no_sync () const;

    bool&
    no_sync ();

    void
    no_sync (const bool&);

    // Print usage information.
    //
    static ::bdep::cli::usage_para
    print_usage (::std::ostream&,
                 ::bdep::cli::usage_para = ::bdep::cli::usage_para::none);

    // Option description.
    //
    static const ::bdep::cli::options&
    description ();

    // Implementation details.
    //
    protected:
    friend struct _cli_cmd_init_options_desc_type;

    static void
    fill (::bdep::cli::options&);

    bool
    _parse (const char*, ::bdep::cli::scanner&);

    private:
    bool
    _parse (::bdep::cli::scanner&,
            ::bdep::cli::unknown_mode option,
            ::bdep::cli::unknown_mode argument);

    public:
    bool empty_;
    dir_path config_add_;
    bool config_add_specified_;
    dir_path config_create_;
    bool config_create_specified_;
    bool no_sync_;
  };
}

// Print page usage information.
//
namespace bdep
{
  ::bdep::cli::usage_para
  print_bdep_init_usage (::std::ostream&,
                         ::bdep::cli::usage_para = ::bdep::cli::usage_para::none);
}

#include <bdep/init-options.ixx>

// Begin epilogue.
//
//
// End epilogue.

#endif // BDEP_INIT_OPTIONS_HXX
